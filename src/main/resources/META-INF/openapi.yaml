openapi: 3.0.0
info:
    description: "This is the REST 'contract' for the Order System"
    version: 1.0.0
    title: "(20F) Group Project - Order System"
    contact:
        name: "(20F) CST 8277"
        email: "normanm@algonquincollege.com"
        url: "https://brightspace.algonquincollege.com/d2l/home/279461"
servers:
    -
        url: "http://localhost:{port}/{contextRoot}/{basePath}"
        variables:
            port: {
                default: "8080"
            }
            contextRoot: {
                default: "rest-orderSystem"
            }
            basePath: {
                default: "api/v1"
            }

security:
    -
        basicAuth: []

tags:
   - name: customers
     description: "Customers"
   - name: stores
     description: "Stores"
   - name: products
     description: "Products"
   - name: orders
     description: "Orders"

components:
    securitySchemes:
        basicAuth:
            type: http
            scheme: basic

    parameters:
        idPathParam:
            in: path
            name: id
            required: true
            schema: {
                type: integer,
                format: int64,
                description: "a resource's id",
                example: 1
            }

    responses:
        ForbiddenError:
            description: "Access to the specified resource has been forbidden"
        UnauthorizedAdminError:
            description: "request requires HTTP authentication for ADMIN_ROLE"
        UnauthorizedUserError:
            description: "request requires HTTP authentication for USER_ROLE"
        NotFound:
            description: "The specified resource was not found"

    schemas:
        PojoBase:
            type: object
            required: [id, version]
            properties: {
                id: {
                    description: "id of entity",
                    type: integer
                },
                version: {
                    description: "version (OptLock) of entity",
                    type: integer
                },
                createdDate: {
                    description: "creation timestamp of entity",
                    type: string,
                    format: date-time
                    },
                updatedDate: {
                    description: "last-updatd timestamp of entity",
                    type: string,
                    format: date-time
                }
            }

        Customer:
            description: "(20F) Group Project - Customer entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                firstName: {type: string, description: "First Name of the customer", example: John},
                lastName: {type: string, description: "Last Name of the customer", example: Doe},
                email: {type: string, description: "Email of the customer", example: John.Doe@gmail.com},
                phoneNumber: {type: string, description: "Phone of the customer", example: '+1.613.555.1212'},
                billingAddress: {$ref: '#/components/schemas/Address'},
                shippingAddress: {$ref: '#/components/schemas/Address'}
            }
        CustomersList:
            description: "list of customers"
            type: array
            items: {
                $ref: "#/components/schemas/Customer"
            }

        Address:
            description: "(20W) Group Project - Address entity"
            discriminator:
              propertyName: type
            required: [type]
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                type: {type: string, description: "Address type. Billing - B, Shipping - S", example: "B"},
                street: {type: string, description: "Location of Address (street)", example: "1385 Woodroffe Avenue"},
                city: {type: string, description: "Location of Address (city)", example: "Ottawa"},
                state: {type: string, description: "Location of Address (State/Province)", example: "ON"},
                country: {type: string, description: "Location of Address (country)", example: "Canada"},
                postal: {type: string, description: "Postal Code", example: "K2G 1V8"}
            }
        BillingAddress:
            allOf: [{
                $ref: "#/components/schemas/Address"  # BillingAddress has all properties of Address
            }]
            properties: { # extra properties only for BillingAddress
                alsoShipping: {type: boolean, description: "indicates that this BillingAddress is also the customer's ShippingAddress"}
            }
        ShippingAddress:
            allOf: [{
                $ref: "#/components/schemas/Address"  # ShippingAddress has all properties of Address
            }]
        Store:
           description: "(20F) Group Project - Store entity" 
           type: object
           allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
           properties: {
                storeName: {type: string, description: "Store name", example: Ottawa store}
           }
        StoresList:
            description: "list of stores"
            type: array
            items: {
                $ref: "#/components/schemas/Store"
            }
        Product:
            description: "(20F) Group Project - Product entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                description: {type: string, description: "Product description", example: Tea},
                serialNo: {type: string, description: "Product Serial Number", example: SN-123}
            }
        ProductsList:
            description: "list of products"
            type: array
            items: {
                $ref: "#/components/schemas/Product"
            }
        ProductStore:
           description: "(20F) Group Project - Product Store relations"
           type: object
           properties: {
               productId: {type: integer, description: "Product Id", example: 123},
               storeId: {type: integer, description: "Store Id", example: 123},
            }           
        Order:
            description: "(20F) Group Project - Order entity"
            type: object
            allOf: [{
                $ref: "#/components/schemas/PojoBase"
            }]
            properties: {
                description: {type: string, description: "Order description", example: My order}
            }
        OrdersList:
            description: "list of orders"
            type: array
            items: {
                $ref: "#/components/schemas/Order"
            }
        OrderLine:
            description: "(20F) Group Project - Order Line entity"
            type: object
            properties: {
                orderId: {type: integer, description: "Order Id", example: 1},
                amount: {type: number, description: "Amount"},
                productId: {type: integer, description: "Product Id", example: 2}
            }
        OrderLinesList:
            description: "(20F) Group Project - Order Lines List entity"
            type: object
            properties: {
                orderId: {type: integer, description: "Order Id", example: 1},
                amount: {type: number, description: "Amount"},
                productId: {type: integer, description: "Product Id", example: 2}
            }
            
paths:
    /customer:
        get:
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/CustomersList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
            tags:
               - customers
        put:
            requestBody: {
                description: "Update customer in Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Customer"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/CustomersList"
                            }
                        }
                    }
                }
            }
            tags:
               - customers
        post:
            requestBody: {
                description: "new customer to be added to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Customer"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/CustomersList"
                            }
                        }
                    }
                }
            }
            tags:
               - customers
    /customer/{id}:
        get:
            summary: "Retrieves a customer by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Customer"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - customers
        delete:
            summary: "Removes a customer by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - customers
    /customer/addAddressForCustomer/{id}:
        put:
            requestBody: {
                description: "new customer to be added to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Address"
                        }
                    }
                }
            }
            summary: "Link address with customer"
            required: true,
            content: {
                application/json: {
                    schema: {
                        $ref: "#/components/schemas/Address"
                    }
                }
            }
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Customer"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - customers
            
    /store:
        get:
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/StoresList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
            tags:
               - stores
        post:
            requestBody: {
                description: "new store to be added to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Store"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/StoresList"
                            }
                        }
                    }
                }
            }
            tags:
               - stores
        put:
            requestBody: {
                description: "Update store in Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Store"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/StoresList"
                            }
                        }
                    }
                }
            }
            tags:
               - stores
    /store/{id}:
        get:
            summary: "Retrieves a store by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Store"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - stores
        delete:
            summary: "Removes a store by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - stores
    /product:
        get:
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/ProductsList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
            tags:
               - products

        post:
            requestBody: {
                description: "new product to be added to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Product"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/ProductsList"
                            }
                        }
                    }
                }
            }
            tags:
               - products
        put:
            requestBody: {
                description: "Update product in Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Product"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/ProductsList"
                            }
                        }
                    }
                }
            }
            tags:
               - products
    /product/{id}:
        get:
            summary: "Retrieves a product by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Product"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - products
            
        delete:
            summary: "Removes a product by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - products
    /product/addProductToStore/{productId}/{storeId}:
       put:
            summary: "Link product and Store"
            parameters:
                - name: "productId"
                  in: "path"
                  description: "Product Id"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "storeId"
                  in: "path"
                  description: "Store Id"
                  required: true
                  type: "integer"
                  format: "int64"
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Product"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - products
    /order:
        get:
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrdersList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
            tags:
               - orders

        post:
            requestBody: {
                description: "new order to be added to Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Order"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrdersList"
                            }
                        }
                    }
                }
            }
            tags:
               - orders
        put:
            requestBody: {
                description: "Update order in Db",
                required: true,
                content: {
                    application/json: {
                        schema: {
                            $ref: "#/components/schemas/Order"
                        }
                    }
                }
            }
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrdersList"
                            }
                        }
                    }
                }
            }
            tags:
               - orders
    /order/{id}:
        get:
            summary: "Retrieves an order by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/Order"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - orders
            
        delete:
            summary: "Removes an order by its id"
            parameters: [{
                $ref: "#/components/parameters/idPathParam"
            }]
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - orders
    /order/orderLines/{orderId}:
        get:
            summary: "Get order lines by order Id"
            parameters:
                - name: "orderId"
                  in: "path"
                  description: "Order Id"
                  required: true
                  type: "integer"
                  format: "int64"
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrderLinesList"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedAdminError"
                }
            }
            tags:
               - orders
    /order/orderLine/{orderId}/{orderLineNumber}:
        get:
            summary: "Retrieves an order line by its id"
            parameters:
                - name: "orderId"
                  in: "path"
                  description: "Order Id"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "orderLineNumber"
                  in: "path"
                  description: "Order Line Number"
                  required: true
                  type: "integer"
                  format: "int64"
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrderLine"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - orders
    /order/addOrderLineToOder/{productId}/{orderId}/{amount}:
       put:
            summary: "Add order line to order"
            parameters:
                - name: "productId"
                  in: "path"
                  description: "Product Id"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "orderId"
                  in: "path"
                  description: "Order Id"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "amount"
                  in: "path"
                  description: "Amount"
                  required: true
                  type: "number"
                  format: "float"
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrderLine"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - orders
    /order/deleteOrderLineToOder/{orderLineNumber}/{orderId}:
       delete:
            summary: "Delete order line from order"
            parameters:
                - name: "orderLineNumber"
                  in: "path"
                  description: "Order Line Number"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "orderId"
                  in: "path"
                  description: "Order Id"
                  required: true
                  type: "integer"
                  format: "int64"
            responses: {
                "204": {
                    description: "Ok (No content, successful operation)"
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - orders
    /order/updateOrderLineToOder/{orderLineNumber}/{orderId}/{amount}:
       put:
            summary: "Update order line"
            parameters:
                - name: "orderLineNumber"
                  in: "path"
                  description: "Order Line Number"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "orderId"
                  in: "path"
                  description: "Order Id"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "amount"
                  in: "path"
                  description: "Amount"
                  required: true
                  type: "number"
                  format: "float"
            responses: {
                "200": {
                    description: "Ok (Successful operation)",
                    content: {
                        application/json: {
                            schema: {
                                $ref: "#/components/schemas/OrderLine"
                            }
                        }
                    }
                },
                "401": {
                    $ref: "#/components/responses/UnauthorizedUserError"
                },
                "403": {
                    $ref: "#/components/responses/ForbiddenError"
                },
                "404": {
                    $ref: "#/components/responses/NotFound"
                }
            }
            tags:
               - orders     